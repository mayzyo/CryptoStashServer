// <auto-generated />
using System;
using CryptoStashServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CryptoStashServer.Migrations
{
    [DbContext(typeof(FinanceContext))]
    [Migration("20211215010905_AddFinanceSchema")]
    partial class AddFinanceSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("financeSchema")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BlockchainToken", b =>
                {
                    b.Property<int>("BlockchainsId")
                        .HasColumnType("integer");

                    b.Property<int>("TokensId")
                        .HasColumnType("integer");

                    b.HasKey("BlockchainsId", "TokensId");

                    b.HasIndex("TokensId");

                    b.ToTable("BlockchainToken");
                });

            modelBuilder.Entity("CryptoStashServer.Models.Blockchain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NativeTokenId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NativeTokenId")
                        .IsUnique();

                    b.ToTable("Blockchains");
                });

            modelBuilder.Entity("CryptoStashServer.Models.CurrencyExchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CurrencyExchanges");
                });

            modelBuilder.Entity("CryptoStashServer.Models.ExchangeAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CurrencyExchangeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyExchangeId");

                    b.ToTable("ExchangeAccounts");
                });

            modelBuilder.Entity("CryptoStashServer.Models.ExchangeAccountApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExchangeAccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeAccountId")
                        .IsUnique();

                    b.HasIndex("PublicKey", "PrivateKey")
                        .IsUnique();

                    b.ToTable("ExchangeAccountApiKeys");
                });

            modelBuilder.Entity("CryptoStashServer.Models.ExchangeAccountBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ExchangeAccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Savings")
                        .HasColumnType("double precision");

                    b.Property<int>("TokenId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeAccountId");

                    b.HasIndex("TokenId");

                    b.ToTable("ExchangeAccountBalances");
                });

            modelBuilder.Entity("CryptoStashServer.Models.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BuyerTokenId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CurrencyExchangeId")
                        .HasColumnType("integer");

                    b.Property<double>("Current")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SellerTokenId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuyerTokenId");

                    b.HasIndex("CurrencyExchangeId");

                    b.HasIndex("SellerTokenId");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("CryptoStashServer.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ticker")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Ticker", "Address")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("CryptoStashServer.Models.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BlockchainId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BlockchainId");

                    b.HasIndex("Address", "BlockchainId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("CryptoStashServer.Models.WalletBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Savings")
                        .HasColumnType("double precision");

                    b.Property<int>("TokenId")
                        .HasColumnType("integer");

                    b.Property<int?>("WalletId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TokenId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletBalances");
                });

            modelBuilder.Entity("ExchangeAccountToken", b =>
                {
                    b.Property<int>("ExchangeAccountsId")
                        .HasColumnType("integer");

                    b.Property<int>("TokensId")
                        .HasColumnType("integer");

                    b.HasKey("ExchangeAccountsId", "TokensId");

                    b.HasIndex("TokensId");

                    b.ToTable("ExchangeAccountToken");
                });

            modelBuilder.Entity("TokenWallet", b =>
                {
                    b.Property<int>("TokensId")
                        .HasColumnType("integer");

                    b.Property<int>("WalletsId")
                        .HasColumnType("integer");

                    b.HasKey("TokensId", "WalletsId");

                    b.HasIndex("WalletsId");

                    b.ToTable("TokenWallet");
                });

            modelBuilder.Entity("BlockchainToken", b =>
                {
                    b.HasOne("CryptoStashServer.Models.Blockchain", null)
                        .WithMany()
                        .HasForeignKey("BlockchainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoStashServer.Models.Token", null)
                        .WithMany()
                        .HasForeignKey("TokensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoStashServer.Models.Blockchain", b =>
                {
                    b.HasOne("CryptoStashServer.Models.Token", "NativeToken")
                        .WithOne("NativeBlockchain")
                        .HasForeignKey("CryptoStashServer.Models.Blockchain", "NativeTokenId");

                    b.Navigation("NativeToken");
                });

            modelBuilder.Entity("CryptoStashServer.Models.ExchangeAccount", b =>
                {
                    b.HasOne("CryptoStashServer.Models.CurrencyExchange", "CurrencyExchange")
                        .WithMany()
                        .HasForeignKey("CurrencyExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyExchange");
                });

            modelBuilder.Entity("CryptoStashServer.Models.ExchangeAccountApiKey", b =>
                {
                    b.HasOne("CryptoStashServer.Models.ExchangeAccount", "ExchangeAccount")
                        .WithOne("ExchangeAccountApiKey")
                        .HasForeignKey("CryptoStashServer.Models.ExchangeAccountApiKey", "ExchangeAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExchangeAccount");
                });

            modelBuilder.Entity("CryptoStashServer.Models.ExchangeAccountBalance", b =>
                {
                    b.HasOne("CryptoStashServer.Models.ExchangeAccount", "ExchangeAccount")
                        .WithMany()
                        .HasForeignKey("ExchangeAccountId");

                    b.HasOne("CryptoStashServer.Models.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExchangeAccount");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("CryptoStashServer.Models.ExchangeRate", b =>
                {
                    b.HasOne("CryptoStashServer.Models.Token", "BuyerToken")
                        .WithMany()
                        .HasForeignKey("BuyerTokenId");

                    b.HasOne("CryptoStashServer.Models.CurrencyExchange", "CurrencyExchange")
                        .WithMany()
                        .HasForeignKey("CurrencyExchangeId");

                    b.HasOne("CryptoStashServer.Models.Token", "SellerToken")
                        .WithMany()
                        .HasForeignKey("SellerTokenId");

                    b.Navigation("BuyerToken");

                    b.Navigation("CurrencyExchange");

                    b.Navigation("SellerToken");
                });

            modelBuilder.Entity("CryptoStashServer.Models.Wallet", b =>
                {
                    b.HasOne("CryptoStashServer.Models.Blockchain", "Blockchain")
                        .WithMany("Wallets")
                        .HasForeignKey("BlockchainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blockchain");
                });

            modelBuilder.Entity("CryptoStashServer.Models.WalletBalance", b =>
                {
                    b.HasOne("CryptoStashServer.Models.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoStashServer.Models.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("Token");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ExchangeAccountToken", b =>
                {
                    b.HasOne("CryptoStashServer.Models.ExchangeAccount", null)
                        .WithMany()
                        .HasForeignKey("ExchangeAccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoStashServer.Models.Token", null)
                        .WithMany()
                        .HasForeignKey("TokensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TokenWallet", b =>
                {
                    b.HasOne("CryptoStashServer.Models.Token", null)
                        .WithMany()
                        .HasForeignKey("TokensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoStashServer.Models.Wallet", null)
                        .WithMany()
                        .HasForeignKey("WalletsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoStashServer.Models.Blockchain", b =>
                {
                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("CryptoStashServer.Models.ExchangeAccount", b =>
                {
                    b.Navigation("ExchangeAccountApiKey")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoStashServer.Models.Token", b =>
                {
                    b.Navigation("NativeBlockchain");
                });
#pragma warning restore 612, 618
        }
    }
}
