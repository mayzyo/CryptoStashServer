// <auto-generated />
using System;
using CryptoStashStats.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CryptoStashStats.Migrations.Mining
{
    [DbContext(typeof(MiningContext))]
    partial class MiningContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("miningSchema")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CryptoStashStats.Models.MiningAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MiningPoolId")
                        .HasColumnType("integer");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MiningPoolId");

                    b.HasIndex("Identifier", "Owner", "MiningPoolId")
                        .IsUnique();

                    b.ToTable("MiningAccounts");
                });

            modelBuilder.Entity("CryptoStashStats.Models.MiningAccountBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("MiningAccountId")
                        .HasColumnType("integer");

                    b.Property<double>("Savings")
                        .HasColumnType("double precision");

                    b.Property<int>("TokenId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MiningAccountId");

                    b.HasIndex("TokenId");

                    b.ToTable("MiningAccountBalances");
                });

            modelBuilder.Entity("CryptoStashStats.Models.MiningPool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MiningPools");
                });

            modelBuilder.Entity("CryptoStashStats.Models.MiningWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MiningAccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MiningAccountId");

                    b.HasIndex("Name", "MiningAccountId")
                        .IsUnique();

                    b.ToTable("MiningWorkers");
                });

            modelBuilder.Entity("CryptoStashStats.Models.MiningWorkerHashRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Average")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Current")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MiningWorkerId")
                        .HasColumnType("integer");

                    b.Property<int>("Reported")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MiningWorkerId");

                    b.ToTable("MiningWorkerHashRates");
                });

            modelBuilder.Entity("CryptoStashStats.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ticker")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Ticker", "Address")
                        .IsUnique();

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("MiningPoolToken", b =>
                {
                    b.Property<int>("MiningPoolsId")
                        .HasColumnType("integer");

                    b.Property<int>("TokensId")
                        .HasColumnType("integer");

                    b.HasKey("MiningPoolsId", "TokensId");

                    b.HasIndex("TokensId");

                    b.ToTable("MiningPoolToken");
                });

            modelBuilder.Entity("CryptoStashStats.Models.MiningAccount", b =>
                {
                    b.HasOne("CryptoStashStats.Models.MiningPool", "MiningPool")
                        .WithMany()
                        .HasForeignKey("MiningPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MiningPool");
                });

            modelBuilder.Entity("CryptoStashStats.Models.MiningAccountBalance", b =>
                {
                    b.HasOne("CryptoStashStats.Models.MiningAccount", "MiningAccount")
                        .WithMany()
                        .HasForeignKey("MiningAccountId");

                    b.HasOne("CryptoStashStats.Models.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MiningAccount");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("CryptoStashStats.Models.MiningWorker", b =>
                {
                    b.HasOne("CryptoStashStats.Models.MiningAccount", "MiningAccount")
                        .WithMany("MiningWorkers")
                        .HasForeignKey("MiningAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MiningAccount");
                });

            modelBuilder.Entity("CryptoStashStats.Models.MiningWorkerHashRate", b =>
                {
                    b.HasOne("CryptoStashStats.Models.MiningWorker", "MiningWorker")
                        .WithMany("MiningWorkerHashRates")
                        .HasForeignKey("MiningWorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MiningWorker");
                });

            modelBuilder.Entity("MiningPoolToken", b =>
                {
                    b.HasOne("CryptoStashStats.Models.MiningPool", null)
                        .WithMany()
                        .HasForeignKey("MiningPoolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoStashStats.Models.Token", null)
                        .WithMany()
                        .HasForeignKey("TokensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoStashStats.Models.MiningAccount", b =>
                {
                    b.Navigation("MiningWorkers");
                });

            modelBuilder.Entity("CryptoStashStats.Models.MiningWorker", b =>
                {
                    b.Navigation("MiningWorkerHashRates");
                });
#pragma warning restore 612, 618
        }
    }
}
